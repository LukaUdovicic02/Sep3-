@using Entity
@using Domain
@using System.Collections.ObjectModel
@using Domain.Interfaces
<h3>Manage Categories</h3>
@page "/Categories"
@inject IViewCategoriesDomain ViewCategoriesDomain
@inject NavigationManager navManager
@inject IDeleteCategoryDomain DeleteCategoryDomain

@if (categories != null)
{
    <table class = "table">
            <thead>
            <tr>
                <th>Name </th>
                <th>Description</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var category in categories)
                 {
                     <tr>
                         <td>@category.Name</td>
                         <td>@category.Desc</td>
                         <td>
                             <button type="button" @onclick="@(() => EditCategory(category))" class="btn btn-link">Edit</button>
                             <button type="button" @onclick="@(() => DeleteCategory(category.CategoryId))" class="btn btn-link">Remove</button>
                         </td>
                         
                     </tr>
                 }
            </tbody>
        </table>
}
<br/>
<button type="button" @onclick="OnClickAddCategory" class="btn btn-primary"> Add Category </button>

@code {

    private IList<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCat();
    }

    private void OnClickAddCategory()
    {
        navManager.NavigateTo("/AddCategory");
    }


    private void EditCategory(Category category)
    {
        navManager.NavigateTo($"/EditCategory/{category.CategoryId}");
    }

    private void DeleteCategory(int categoryId)
    {
        DeleteCategoryDomain.Delete(categoryId);
        LoadCat();
    }

    private void LoadCat()
    {
        categories = ViewCategoriesDomain.Execute()?.ToList();
    }

}