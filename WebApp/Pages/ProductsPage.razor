@page "/Products"
@using Domain.Products.Interfaces
@using Entity
@using Domain.Interfaces
@inject IViewProductDomain ProductDomain
@inject IGetCategoryByIdDomain CategoryByIdDomain
@inject NavigationManager NavigationManager
@inject IDeleteProductDomain DeleteProductDomain
<h3>Products Page</h3>
<br/>
@if (_products != null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Product Category </th>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in _products)
        {
            <tr>
                <td>@CategoryByIdDomain.Execute(product.CategoryId)?.Name</td>
                <td>@product.Name</td>
                <td>@(Math.Round(product.Price, 2))</td>
                <td>@product.Quantity</td>
                <td>
                    <button type="button" class="btn btn-link" @onclick="@(() => EditProduct(product))"> Edit </button>
                    &nbsp;
                    <button type="button" @onclick="@(() => DeleteProduct(product.ProductId))" class="btn btn-link">Remove</button>

                </td>
            </tr>
        }
        </tbody>
    </table>
}

<br/>
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary"> Add Product </button>


@code {

    private IEnumerable<Product> _products;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _products = ProductDomain.Run();
    }


    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/AddProduct");
    }

    private void EditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/EditProduct/{product.ProductId}");
    }

    private void DeleteProduct(int productProductId)
    {
        DeleteProductDomain.DeleteProduct(productProductId);
    }

}