@page "/EditCategory/{categoryId}"
@using Entity
@using Domain.Interfaces
@inject NavigationManager Manager
@inject IGetCategoryByIdDomain _getCategoryByIdDomain
@inject IEditCategoryDomain editCategoryDomain
<h3>Edit Category</h3>

@if (_category != null)
{
    <EditForm Model="_category" class="form-inline" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="_category.Name" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="desc">Description</label>
            <InputText id="desc" @bind-Value="_category.Desc" class="form-control"></InputText>
        </div>

        <button type="submit" class="btn btn-primary">Add</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {

    [Parameter]
    public string CategoryId { get; set; }

    private Category _category;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _category = new Category();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.CategoryId, out int iCategoryId))
        {
            var cat  = _getCategoryByIdDomain.Execute(iCategoryId);
            this._category = new Category {CategoryId = cat.CategoryId , Name = cat.Name , Desc = cat.Desc };
        }
    }

    private void OnValidSubmit()
    {
        editCategoryDomain.Execute(_category);
        Manager.NavigateTo("/Categories");
    }

    private void OnCancel()
    {
        Manager.NavigateTo("/Categories");
    }

}